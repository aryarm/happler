import warnings
from pathlib import Path
import snakemake.io as io
from snakemake.utils import min_version

##### set minimum snakemake version #####
min_version("7.14.0")


# IMPORT CONFIG VARIABLES
configfile: "config/config.yml"


def check_config(value, default=False, place=config, as_set=False):
    """return true if config value exists and is true"""
    value = place[value] if (value in place and place[value]) else default
    return (set(value) if isinstance(value, list) else {value}) if as_set else value


# handle defaults
config["out"] = check_config("out", "out")
config["min_maf"] = check_config("min_maf", 0)
config["exclude_causal"] = check_config("exclude_causal", False, as_set=True)
locus = config["locus"].replace(":", "_")
# remove any trailing slashes in directories and set the variables
config["out"] = str(Path(config["out"])) + f"/{locus}"
# convert the exclude_causal var into a dict for later
exclude_causal = {("in", "ex")[val]: val for val in config["exclude_causal"]}
mode = config["mode"]


module genotypes:
    snakefile: "rules/genotypes.smk"
    config: config

use rule * from genotypes as genotypes_*
config["gts_snp_panel"] = rules.genotypes_vcf2plink.output.pgen
config["gts_str_panel"] = rules.genotypes_subset_str.output.vcf


module simulate:
    snakefile: "rules/simulate.smk"
    config: config
use rule * from simulate as simulate_*

if mode in ("snp", "hap", "ld_range"):
    happler_config = {
        "pheno": rules.simulate_simphenotype.output.pheno,
        "hap_file": rules.simulate_transform.input.hap,
        "snp_panel": config["gts_snp_panel"],
        "out": config["out"] + "/happler/"+mode+"/{beta}",
    }
    if mode in ("hap", "ld_range"):
        happler_config["snps"] = []
        if mode == "hap":
            happler_config["snps"] = config["modes"][mode]["alleles"]
        happler_config["causal_gt"] = rules.simulate_transform.output.pgen
    if mode == "ld_range":
        happler_config["out"] = config["out"] + "/happler/"+mode+"/ld_{ld}/{beta}"
elif "str" == mode:
    pass
else:
    raise ValueError("Unsupported operating 'mode' in config")

module happler:
    snakefile: "rules/happler.smk"
    config: happler_config
use rule * from happler as happler_*
merged_happler = rules.happler_merge.output.pgen

if mode in ("hap", "str"):
    finemappers_config = {
        "pheno": rules.simulate_simphenotype.output.pheno,
        "out": config["out"] + "/finemappers/"+mode+"/{beta}",
        "snp_panel": config["gts_snp_panel"],
    }
    if mode == "hap":
        finemappers_config["causal_gt"] = rules.simulate_transform.output.pgen
    else:
        raise ValueError("Not yet implemented operating mode 'str' in config")
    module finemappers:
        snakefile: "rules/finemappers.smk"
        config: finemappers_config
    use rule * from finemappers as finemappers_*
elif "ld_range" == mode:
    pass
else:
    raise ValueError(f"Unsupported operating mode '{mode}' in config")

plots_config = {
    "out": config["out"] + "/plots",
    "mode": mode,
    "mode_attrs": config["modes"][mode],
    "happler_hap": rules.happler_run.output.hap,
    "causal_hap": rules.simulate_transform.input.hap,
    "snp_panel": config["gts_snp_panel"],
}
if mode == "ld_range":
    plots_config["ld_range_checkpoint"] = checkpoints.simulate_create_hap_ld_range

module plots:
    snakefile: "rules/plots.smk"
    config: plots_config
use rule * from plots as plots_*

rule all:
    input:
        expand(
            [
                rules.happler_tree.output.png,
                rules.happler_manhattan.output.png,
                rules.finemappers_results.output.susie_pdf,
                # rules.happler_results.output.susie_pdf,
            ],
            causal=(("ex",) if mode == "hap" else ("ex", "in")),
            beta=config["modes"]["hap"]["beta"],
        ) if mode != "ld_range" else [rules.plots_params.output.png]
    default_target: True
